name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
# pool: myAgentPool

variables:
  python.version: '3.9.7'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection1'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'agentVM'
  subscriptionId: '12632a52-ca62-4cdc-b3d2-a783cd00d338'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts' # variable value
        sshPublicKey:     "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7qr08p7822iNxkU0t/p17M1oqHVua0vEMJ93HU2deJJGg6bS6QtLLQ2bKpkHq547w0BBevePlyvhN5UEOPKThjn9yRrZiRMvmS6v1GEVY/bUHpDvWXwwN/tQi8casDswSVDsuCyP+0gLZI5S5eCwTYFQvKl/FBe+s5SBNwCjGDPnwHHhu79LtGgbUTYozbt0JVavprYStZ7+Xxa343g1rVKHxgZl5Vpe0m8Pggby5o4L5kjQcn37GfLwPn5NV9VXLOobH1fxMyiDnTEMze61fWu8Iqp4blt/GQnulyldgHxV3zw5I2ZBrqcKX4WkKyF1wWxqf7AMxJZInc877b5hn mgorkii@NLP-LT83"        # variable value
        sshKeySecureFile: 'id_rsa_udacity' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: 
    #  displayName: 'Download ssh key'
    #  inputs:
    #   secureFile: 'id_rsa_udacity'
    
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate22856842'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # ToDo: Run Terraform Validate    
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman Runner
      inputs:
        script: |
          sudo npm install -g newman # ToDo: Write your commands to install newman
                mkdir -p automatedtesting/postman/logs
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory and the newman scripts
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script:   |
                  newman run automatedtesting/postman/ValidationTest.json \
                  -e automatedtesting/postman/TestEnvironment.postman_environment.json \
                  --reporters cli,junit \
                  --reporter-junit-export automatedtesting/postman/logs/TEST-ValidationTest.xml \
                  --suppress-exit-code
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Regression Test Suite    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script:  |
                newman run automatedtesting/postman/RegressionTest.json \
                -e automatedtesting/postman/TestEnvironment.postman_environment.json \
                --reporters cli,junit \
                --reporter-junit-export automatedtesting/postman/logs/TEST-RegressionTest.xml \
                --suppress-exit-code
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder:       $(System.DefaultWorkingDirectory)/automatedtesting/postman/logs
        mergeTestResults: true
        testRunTitle:       "Postman Test Results"


    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests \ Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: 'drop-uitests'


#--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.BuildId)-fakerestapi.zip'
        replaceExistingArchive: true
    # FakeRestAPI - Publish
    - task: PublishPipelineArtifact@1
      displayName: 'Publish FakeRestAPI'
      inputs:
        targetPath: '$(Build.BuildId)-fakerestapi.zip'
        artifactName: drop-fakerestapi   



    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/jmeter-$(Build.BuildId).zip'
    # JMeter Test Suite - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/jmeter-$(Build.BuildId).zip'
      displayName: Publish Jmeter
      artifact: 'drop-jmeter'



#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'      
    environment: 'agentVM'  # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'   
              appName:                'myApplication-AppService-lwa'
              appType: webApp
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'      # ToDo: Use the published zip artifact.
              deploymentMethod:       'auto'

  - deployment: VMDeploy
    displayName: VM Deploy
    environment:
      name: 'agentVM'         # ToDo: Change/provide a name
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests     # ToDo: Change/provide a name           
          - task: Bash@3
            displayName: Run Selenium tests
            inputs:
              targetType: 'inline'
              script: |           
                #! /bin/bash
                    
                # sudo apt-get upgrade -y
                # sudo apt-get install python3-pip -y
                # sudo apt-get install unzip -y
                # sudo apt-get install -y chromium-browser
                # pip3 install selenium
                
                # download chrome driver v89
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
                fi
                # install chrome driver
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version
                # agent log analytics
                # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ba2f2875-7939-40f7-8fab-9fdfe5774935 -s rb9iiVdW/SUHbVCH4V83NX16EgaXKTEtX7WfGSxykJ3iCaZ/Tm/FFqigsvOAUajQZM0L5k9vAnyM3lD4Iv61cw==
                # sudo /opt/microsoft/omsagent/bin/service_control restart ba2f2875-7939-40f7-8fab-9fdfe5774935
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)drop-uitests/$(Build.BuildId)-uitests.zip -d .
                sudo mkdir /var/logs
                python3 login.py > ui-logs.log
                sudo mv ui-logs.log /var/logs

          # - task: PublishPipelineArtifact@1
          #   displayName: Publish Selenium log file
          #   inputs:
          #     targetPath: '$(System.DefaultWorkingDirectory)/log/selenium'
          #     artifactName: 'selenium-log'
          #     publishLocation: 'pipeline'

- stage: Tests
  displayName: Tests
  jobs:
    - job: Jmeter
      displayName: Jmeter
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
          - task: CmdLine@2
            displayName: Install jmeter
            inputs:
               script: |
                        sudo apt-get install openjdk-11-jre-headless -y
                        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
                        tar xzvf jmeter.tgz
                        apache-jmeter-5.4/bin/jmeter --version
                        mkdir -p log/jmeter
                        pwd
                        ls -la
          - task: CmdLine@2
            displayName: Run JMeter Stress tests
            inputs:
              script: |
                        pwd
                        ls -d */
                        ls automatedtesting
                        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/test-suite/stressTest.jmx \
                        -l log/jmeter/stress-test-result.csv \
                        -e -f -o log/jmeter/stress-test-html-report \
                        -j log/jmeter/jmeter-stress-test.log

          - task: CmdLine@2
            displayName: Run JMeter Endurance tests
            inputs:
                script: |
                          apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/test-suite/enduranceTest.jmx \
                          -l log/jmeter/endurance-test-result.csv \
                          -e -f -o log/jmeter/endurance-test-html-report \
                          -j log/jmeter/jmeter-endurance-test.log
          - task: ArchiveFiles@2
            displayName: Save JMeter Stress Test Report to Artifact
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
              verbose: true
          - task: ArchiveFiles@2
            displayName: Save JMeter Endurance Test Report to Artifact
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
              verbose: true
          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              artifactName: 'drop-jmeter-logs'
            
#--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
    - deployment: VMDeploy
      displayName: Selenium Tests
      environment:
        name: 'agentVM'         # ToDo: Change/provide a name
        resourceType: VirtualMachine
      strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: drop-uitests     # ToDo: Change/provide a name
                
              - task: Bash@3
                displayName: Run Selenium tests
                inputs:
                  targetType: 'inline'
                  script: |           
                    # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
                    #! /bin/bash
                    cat /etc/*-release
                    sudo apt-get install software-properties-common -y
                    sudo apt-add-repository universe -y
                    sudo apt-get update -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    sudo apt-get install -y chromium-chromedriver
                    python3 -m pip install --upgrade pip
                    pip3 install selenium
                    python3 -V
                    pip3 -V
                    pip3 freeze
                    /usr/bin/chromium-browser --version
                    /usr/bin/chromedriver --version
                    cd $(Pipeline.Workspace)/drop-uitests
                    find . -type f ! -name '$(Build.BuildId)-uitests.zip' -delete 
                    unzip -o $(Build.BuildId)-uitests.zip
                    pwd
                    ls -la
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 664 /var/log/selenium
                    sudo python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                    # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    pwd
                    sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                    ls -la
              - task: PublishPipelineArtifact@1
                displayName: Publish Selenium log file
                inputs:
                  targetPath: '$(System.DefaultWorkingDirectory)/log/selenium'
                  artifactName: 'selenium-log'
                  publishLocation: 'pipeline'

          
